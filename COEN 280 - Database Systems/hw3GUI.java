/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coen.pkg280.hw.pkg3;
import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;


/**
 *
 * @author Nicholas
 */
public class hw3GUI extends javax.swing.JFrame {

    /**
     * Creates new form hw3GUI
     */
    public hw3GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBetweenAttributeValuesButtonGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        castCombo1 = new javax.swing.JComboBox<>();
        castComboText1 = new javax.swing.JTextField();
        castComboText2 = new javax.swing.JTextField();
        castCombo2 = new javax.swing.JComboBox<>();
        castComboText3 = new javax.swing.JTextField();
        castCombo3 = new javax.swing.JComboBox<>();
        castComboText4 = new javax.swing.JTextField();
        castCombo4 = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        directorCombo = new javax.swing.JComboBox<>();
        directorComboText = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tagTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        radioAnd = new javax.swing.JRadioButton();
        radioOr = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryOutput = new javax.swing.JTextArea();
        executeMovieQueryButton = new javax.swing.JButton();
        executeUserQueryButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        genreTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        movieFromYear = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        movieToYear = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        countryTable = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        tagFilterOperator = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tagFilterValue = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        movieResultsTable = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cast", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        castCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castCombo1ActionPerformed(evt);
            }
        });

        castComboText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castComboText1ActionPerformed(evt);
            }
        });

        castComboText2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castComboText2ActionPerformed(evt);
            }
        });

        castCombo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castCombo2ActionPerformed(evt);
            }
        });

        castComboText3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castComboText3ActionPerformed(evt);
            }
        });

        castCombo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castCombo3ActionPerformed(evt);
            }
        });

        castComboText4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castComboText4ActionPerformed(evt);
            }
        });

        castCombo4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castCombo4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(castComboText4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(castCombo3, javax.swing.GroupLayout.Alignment.LEADING, 0, 150, Short.MAX_VALUE)
                    .addComponent(castCombo2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(castCombo1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(castCombo4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(castCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(castCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(castCombo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(castCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(castComboText4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Director", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        directorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directorComboActionPerformed(evt);
            }
        });

        directorComboText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directorComboTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(directorComboText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directorCombo, 0, 95, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(directorComboText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(directorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tag IDs and Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        tagTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Checkbox", "ID", "Value", "Weight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tagTable);
        if (tagTable.getColumnModel().getColumnCount() > 0) {
            tagTable.getColumnModel().getColumn(0).setResizable(false);
            tagTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            tagTable.getColumnModel().getColumn(1).setResizable(false);
            tagTable.getColumnModel().getColumn(2).setResizable(false);
            tagTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            tagTable.getColumnModel().getColumn(3).setResizable(false);
            tagTable.getColumnModel().getColumn(3).setPreferredWidth(25);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Between Attribute Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        searchBetweenAttributeValuesButtonGroup.add(radioAnd);
        radioAnd.setText("AND");

        searchBetweenAttributeValuesButtonGroup.add(radioOr);
        radioOr.setText("OR");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioAnd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioOr)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioAnd)
                    .addComponent(radioOr)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Query", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        queryOutput.setColumns(20);
        queryOutput.setRows(5);
        jScrollPane1.setViewportView(queryOutput);

        executeMovieQueryButton.setText("Execute Movie Query");
        executeMovieQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeMovieQueryButtonActionPerformed(evt);
            }
        });

        executeUserQueryButton.setText("Execute User Query");
        executeUserQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeUserQueryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(executeMovieQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)
                        .addComponent(executeUserQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(executeMovieQueryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(executeUserQueryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Genres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        genreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "Drama"},
                {null, "Action"},
                {null, "Animation"},
                {null, "Comedy"},
                {null, "Mystery"},
                {null, "Sci-Fi"},
                {null, "Children"},
                {null, "Musical"},
                {null, "Thriller"},
                {null, "Film-Noir"},
                {null, "Romance"},
                {null, "Adventure"},
                {null, "Western"},
                {null, "Horror"},
                {null, "Action"},
                {null, "IMAX"},
                { new Boolean(false), "War"},
                {null, "Documentary"},
                {null, "Fantasy"},
                {null, "Short"}
            },
            new String [] {
                "Checkbox", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        genreTable.getTableHeader().setReorderingAllowed(false);
        genreTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genreTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(genreTable);
        if (genreTable.getColumnModel().getColumnCount() > 0) {
            genreTable.getColumnModel().getColumn(0).setResizable(false);
            genreTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Movie Year", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        movieFromYear.setText("1903");
        movieFromYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieFromYearActionPerformed(evt);
            }
        });

        jLabel1.setText("From");

        jLabel2.setText("To");

        movieToYear.setText("2011");
        movieToYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieToYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieToYear, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(movieFromYear)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movieFromYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(movieToYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Country", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        countryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Checkbox", "Country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        countryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countryTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(countryTable);
        if (countryTable.getColumnModel().getColumnCount() > 0) {
            countryTable.getColumnModel().getColumn(0).setResizable(false);
            countryTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tag Filter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        tagFilterOperator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">" }));

        jLabel3.setText("Tag Weight");

        jLabel4.setText("Value");

        tagFilterValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagFilterValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tagFilterOperator, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tagFilterValue))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagFilterOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(tagFilterValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Movie Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        movieResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Checkbox", "ID", "Title", "Year", "RT AVG", "RT NUM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(movieResultsTable);
        if (movieResultsTable.getColumnModel().getColumnCount() > 0) {
            movieResultsTable.getColumnModel().getColumn(0).setResizable(false);
            movieResultsTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            movieResultsTable.getColumnModel().getColumn(1).setResizable(false);
            movieResultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            movieResultsTable.getColumnModel().getColumn(3).setResizable(false);
            movieResultsTable.getColumnModel().getColumn(3).setPreferredWidth(40);
            movieResultsTable.getColumnModel().getColumn(4).setResizable(false);
            movieResultsTable.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("User Results"));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void movieFromYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieFromYearActionPerformed
        findCountries();
    }//GEN-LAST:event_movieFromYearActionPerformed

    private void movieToYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieToYearActionPerformed
        findCountries();
    }//GEN-LAST:event_movieToYearActionPerformed

    private void executeMovieQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeMovieQueryButtonActionPerformed
        movieResultsQuery();
    }//GEN-LAST:event_executeMovieQueryButtonActionPerformed

    private void genreTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genreTableMouseClicked
        findCountries();
    }//GEN-LAST:event_genreTableMouseClicked

    //Find Actors and Directors in movies with any of the countries selected, all of the genres and between the given years
    //We do an OR on the countries because a film is only in 1 country.
    private void countryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countryTableMouseClicked
        int countryRowCount = countryTable.getRowCount();
        if(countryRowCount == 0){
            return;
        }
        ArrayList <String> genreList = new ArrayList <>();
        int rowCount = genreTable.getRowCount();
        for(int i = 0; i < rowCount; i++){
            if(genreTable.getValueAt(i, 0) != null && (Boolean) genreTable.getValueAt(i, 0)){
                genreList.add(genreTable.getValueAt(i, 1).toString());
            }
        }
        StringBuilder actorQuery = new StringBuilder();
        actorQuery.append("SELECT UNIQUE a.actorName\n");
        actorQuery.append("FROM movieActors a\n");
        actorQuery.append("WHERE a.movieID IN(\n");
        actorQuery.append("	SELECT c.movieID\n");
        actorQuery.append("	FROM movieCountries c\n");
        actorQuery.append("	WHERE (");
        ArrayList <String> countryList = new ArrayList <>();
        for(int i = 0; i < countryRowCount; i++){
            if(countryTable.getValueAt(i, 0) != null && (Boolean) countryTable.getValueAt(i, 0)){
                countryList.add(countryTable.getValueAt(i, 1).toString());
            }
        }
        countryList.forEach((country) -> {
            actorQuery.append("c.country = '").append(country).append("' OR ");
        });
        actorQuery.delete(actorQuery.length()-4, actorQuery.length());
        actorQuery.append(") AND c.movieID IN(\n");
        actorQuery.append("		SELECT m.movieID\n");
        actorQuery.append("		FROM movies m\n");
        actorQuery.append("		WHERE m.year >= ").append(movieFromYear.getText());
        actorQuery.append(" AND m.year <= ").append(movieToYear.getText());
        actorQuery.append(" AND m.movieID IN(\n");
        actorQuery.append("			SELECT g1.movieID\n");
        actorQuery.append("			FROM movieGenres g1");
        for(int i = 1; i < genreList.size(); i++){
            actorQuery.append(", movieGenres g").append(i+1);
        }
        actorQuery.append("\n			WHERE (g1.genre = '").append(genreList.get(0)).append("'");
        if(genreList.size() > 1){
            for(int i = 1; i < genreList.size(); i++){
                actorQuery.append(" ").append(andOr()).append(" g").append(i+1).append(".genre = '").append(genreList.get(i)).append("'");
            }
            actorQuery.append(")");
            for(int i = 1; i < genreList.size(); i++){
                actorQuery.append(" AND g").append(i).append(".movieID = g").append(i+1).append(".movieID");
            }
        }
        else{
            actorQuery.append(")");
        }
        actorQuery.append(")))");
        
        //Build the directorQuery off the actorQuery
        StringBuilder directorQuery = new StringBuilder(actorQuery.substring(53));
        directorQuery.insert(0, "WHERE d.");
        directorQuery.insert(0, "FROM movieDirectors d\n");
        directorQuery.insert(0, "SELECT d.directorName\n");
        queryOutput.setText(actorQuery.toString());
        ResultSet actorResults = queryDatabase.main(actorQuery.toString());
        try{
            castCombo1.removeAllItems();
            castCombo2.removeAllItems();
            castCombo3.removeAllItems();
            castCombo4.removeAllItems();
            while(actorResults.next()){
                castCombo1.addItem(actorResults.getString(1));
                castCombo2.addItem(actorResults.getString(1));
                castCombo3.addItem(actorResults.getString(1));
                castCombo4.addItem(actorResults.getString(1));
            }
            castComboText1.setText(""); //stops autopopulation of text field
            castComboText2.setText("");
            castComboText3.setText("");
            castComboText4.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet directorResults = queryDatabase.main(directorQuery.toString());
        try{
            directorCombo.removeAllItems();
            while(directorResults.next()){
                directorCombo.addItem(directorResults.getString(1));
            }
            directorComboText.setText(""); //stops autopopulation of text field
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_countryTableMouseClicked

    //populates selections to the text field
    private void castCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castCombo1ActionPerformed
        castComboText1.setText((String) castCombo1.getSelectedItem());
    }//GEN-LAST:event_castCombo1ActionPerformed

    private void castCombo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castCombo2ActionPerformed
        castComboText2.setText((String) castCombo2.getSelectedItem());
    }//GEN-LAST:event_castCombo2ActionPerformed

    private void castCombo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castCombo3ActionPerformed
        castComboText3.setText((String) castCombo3.getSelectedItem());
    }//GEN-LAST:event_castCombo3ActionPerformed

    private void castCombo4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castCombo4ActionPerformed
        castComboText4.setText((String) castCombo4.getSelectedItem());
    }//GEN-LAST:event_castCombo4ActionPerformed

    private void directorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directorComboActionPerformed
        directorComboText.setText((String) directorCombo.getSelectedItem());
    }//GEN-LAST:event_directorComboActionPerformed

    private void castComboText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castComboText1ActionPerformed
        if(!castComboText1.getText().trim().isEmpty()){
            findTags();
        }
    }//GEN-LAST:event_castComboText1ActionPerformed

    private void directorComboTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directorComboTextActionPerformed
        if(!directorComboText.getText().trim().isEmpty()){
            findTags();
        }
    }//GEN-LAST:event_directorComboTextActionPerformed

    private void castComboText2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castComboText2ActionPerformed
        if(!castComboText2.getText().trim().isEmpty()){
            findTags();
        }
    }//GEN-LAST:event_castComboText2ActionPerformed

    private void castComboText3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castComboText3ActionPerformed
        if(!castComboText3.getText().trim().isEmpty()){
            findTags();
        }
    }//GEN-LAST:event_castComboText3ActionPerformed

    private void castComboText4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castComboText4ActionPerformed
        if(!castComboText4.getText().trim().isEmpty()){
            findTags();
        }
    }//GEN-LAST:event_castComboText4ActionPerformed

    private void tagFilterValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagFilterValueActionPerformed
        findTags();
    }//GEN-LAST:event_tagFilterValueActionPerformed

    private void executeUserQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeUserQueryButtonActionPerformed
        ArrayList <String> movieList = new ArrayList <>();
        for(int i = 0; i < movieResultsTable.getRowCount(); i++){
            if(movieResultsTable.getValueAt(i, 0) != null && (Boolean) movieResultsTable.getValueAt(i, 0)){
                movieList.add(movieResultsTable.getValueAt(i, 1).toString());
            }
        }
        ArrayList <String> tagList = new ArrayList <>();
        for(int i = 0; i < tagTable.getRowCount(); i++){
            if(tagTable.getValueAt(i, 0) != null && (Boolean) tagTable.getValueAt(i, 0)){
                tagList.add(tagTable.getValueAt(i, 1).toString());
            }
        }
        if(tagList.size() == 0 || movieList.size() == 0){
            return;
        }
        StringBuilder userQuery = new StringBuilder();
        userQuery.append("SELECT UNIQUE utm.userID\n");
        userQuery.append("FROM userTaggedMovies utm\n");
        userQuery.append("WHERE (utm.movieID = ").append(movieList.get(0));
        for(int i = 1; i < movieList.size(); i++){
            userQuery.append(" OR utm.movieID = ").append(movieList.get(i));
        }
        userQuery.append(") AND (utm.tagID = ").append(tagList.get(0));
        for(int i = 1; i < tagList.size(); i++){
            userQuery.append(" OR utm.tagID = ").append(tagList.get(i));
        }
        userQuery.append(")");
        queryOutput.setText(userQuery.toString());
        ResultSet userResults = queryDatabase.main(userQuery.toString());
        try {
            DefaultTableModel model = (DefaultTableModel) userTable.getModel();
            model.setRowCount(0);
            while(userResults.next()){
                int userID = userResults.getInt(1);
                Object[] row = {userID};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_executeUserQueryButtonActionPerformed
    
    //Find the appropriate tags
    private void findTags(){
        int rightParentheses = 0;
        ArrayList <String> genreList = new ArrayList <>();
        for(int i = 0; i < genreTable.getRowCount(); i++){
            if(genreTable.getValueAt(i, 0) != null && (Boolean) genreTable.getValueAt(i, 0)){
                genreList.add(genreTable.getValueAt(i, 1).toString());
            }
        }
        ArrayList <String> countryList = new ArrayList <>();
        for(int i = 0; i < countryTable.getRowCount(); i++){
            if(countryTable.getValueAt(i, 0) != null && (Boolean) countryTable.getValueAt(i, 0)){
                countryList.add(countryTable.getValueAt(i, 1).toString());
            }
        }
        ArrayList <String> actorList = new ArrayList <>();
        if(!castComboText1.getText().trim().isEmpty()){
            actorList.add(castComboText1.getText());
        }
        if(!castComboText2.getText().trim().isEmpty()){
            actorList.add(castComboText2.getText());
        }
        if(!castComboText3.getText().trim().isEmpty()){
            actorList.add(castComboText3.getText());
        }
        if(!castComboText4.getText().trim().isEmpty()){
            actorList.add(castComboText4.getText());
        }
        if((actorList.isEmpty() && directorComboText.getText().trim().isEmpty()) || genreList.isEmpty() || countryList.isEmpty()){
            return;
        }
        
        StringBuilder tagQuery = new StringBuilder();
        tagQuery.append("SELECT UNIQUE mt.tagID, t.text, mt.tagWeight\n");
        tagQuery.append("FROM movieTags mt, tags t\n");
        tagQuery.append("WHERE mt.tagID = t.tagID AND mt.movieID IN(\n");
        //Subquery with actors
        if(actorList.size() > 0){
            rightParentheses++;
            tagQuery.append("SELECT a1.movieID\n");
            tagQuery.append("FROM movieActors a1");
            for(int i = 1; i < actorList.size(); i++){
                tagQuery.append(", movieActors a").append(i+1);
            }
            tagQuery.append("\nWHERE (a1.actorName = '").append(actorList.get(0)).append("'");
            for(int i = 1; i < actorList.size(); i++){
                tagQuery.append(" ").append(andOr()).append(" a").append(i+1).append(".actorName = '").append(actorList.get(i)).append("'");
            }
            tagQuery.append(") AND ");
            for(int i = 1; i < actorList.size(); i++){
                tagQuery.append("a").append(i).append(".movieID = a").append(i+1).append(".movieID").append(" AND ");
            }
            tagQuery.append("a1.movieID IN(\n");
        }
        //Subquery for directors
        if(!directorComboText.getText().trim().isEmpty()){
            rightParentheses++;
            tagQuery.append("SELECT d.movieID\n");
            tagQuery.append("FROM movieDirectors d\n");
            tagQuery.append("WHERE d.directorName = '").append(directorComboText.getText()).append("' AND d.movieID IN(\n");
        }
        //subquery for countries
        if(countryList.size() > 0){
            rightParentheses++;
            tagQuery.append("SELECT c.movieID\n");
            tagQuery.append("FROM movieCountries c\n");
            tagQuery.append("WHERE (c.country = '").append(countryList.get(0)).append("'");
            for(int i = 1; i < countryList.size(); i++){
                tagQuery.append(" OR c.country = '").append(countryList.get(i)).append("'");
            }
            tagQuery.append(") AND c.movieID IN(\n");
        }
        //add year filter
        tagQuery.append("SELECT m.movieID\n");
        tagQuery.append("FROM MOVIES m\n");
        tagQuery.append("WHERE m.year >= ").append(movieFromYear.getText()).append(" AND m.year <= ").append(movieToYear.getText()).append(" AND m.movieID IN(\n");
        //add genre filter
        if(genreList.isEmpty()){
            return;
        }
        tagQuery.append("SELECT g1.movieID\n");
        tagQuery.append("FROM movieGenres g1");
        for(int i = 1; i < genreList.size(); i++){
            tagQuery.append(", movieGenres g").append(i+1);
        }
        tagQuery.append("\nWHERE (g1.genre = '").append(genreList.get(0)).append("'");
        if(genreList.size() > 1){
            for(int i = 1; i < genreList.size(); i++){
                tagQuery.append(" ").append(andOr()).append(" g").append(i+1).append(".genre = '").append(genreList.get(i)).append("'");
            }
            tagQuery.append(")");
            for(int i = 1; i < genreList.size(); i++){
                tagQuery.append(" AND g").append(i).append(".movieID = g").append(i+1).append(".movieID");
            }
        }
        else{
            tagQuery.append(")");
        }
        tagQuery.append("))");
        for(int i = 0; i < rightParentheses; i++){
            tagQuery.append(")");
        }
        queryOutput.setText(tagQuery.toString());
        ResultSet tagResults = queryDatabase.main(tagQuery.toString());
        try {
            DefaultTableModel model = (DefaultTableModel) tagTable.getModel();
            model.setRowCount(0);
            while(tagResults.next()){
                int tagID = tagResults.getInt(1);
                String text = tagResults.getString(2);
                int weight = tagResults.getInt(3);
                Object[] row = {false, tagID, text, weight};
                if(!tagFilterValue.getText().trim().isEmpty()){
                    if(tagFilterOperator.getSelectedItem() == "<"){
                        if(weight < Integer.parseInt(tagFilterValue.getText())){
                            model.addRow(row);
                        }
                    }
                    else if(tagFilterOperator.getSelectedItem() == "="){
                        if(weight == Integer.parseInt(tagFilterValue.getText())){
                            model.addRow(row);
                        }
                    }
                    else if(tagFilterOperator.getSelectedItem() == ">"){
                        if(weight > Integer.parseInt(tagFilterValue.getText())){
                            model.addRow(row);
                        }
                    }
                } else{
                    model.addRow(row);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Find the appropriate countries where movies were filmed with all of the genres selected and between the years given
    private void findCountries(){
        ArrayList <String> genreList = new ArrayList <>();
        int rowCount = genreTable.getRowCount();
        for(int i = 0; i < rowCount; i++){
            if(genreTable.getValueAt(i, 0) != null && (Boolean) genreTable.getValueAt(i, 0)){
                genreList.add(genreTable.getValueAt(i, 1).toString());
            }
        }
        if(genreList.size() <= 0){
            return;
        }
        StringBuilder countryQuery = new StringBuilder();
        countryQuery.append("SELECT UNIQUE c.country\n");
        countryQuery.append("FROM movieCountries c\n");
        countryQuery.append("WHERE c.movieID IN(\n");
        countryQuery.append("	SELECT m.movieID\n");
        countryQuery.append("	FROM movies m\n");
        countryQuery.append("	WHERE m.year >= ").append(movieFromYear.getText());
        countryQuery.append(" AND m.year <= ").append(movieToYear.getText());
        countryQuery.append(" AND m.movieID IN(\n");
        countryQuery.append("		SELECT g1.movieID\n");
        countryQuery.append("		FROM movieGenres g1");
        for(int i = 1; i < genreList.size(); i++){
            countryQuery.append(", movieGenres g").append(i+1);
        }
        countryQuery.append("\n		WHERE (g1.genre = '").append(genreList.get(0)).append("'");
        if(genreList.size() > 1){
            for(int i = 1; i < genreList.size(); i++){
                countryQuery.append(" ").append(andOr()).append(" g").append(i+1).append(".genre = '").append(genreList.get(i)).append("'");
            }
            countryQuery.append(")");
            for(int i = 1; i < genreList.size(); i++){
                countryQuery.append(" AND g").append(i).append(".movieID = g").append(i+1).append(".movieID");
            }
        }
        else{
            countryQuery.append(")");
        }
        countryQuery.append("))");
        queryOutput.setText(countryQuery.toString());
        ResultSet countryResults = queryDatabase.main(countryQuery.toString());
        try {
            DefaultTableModel model = (DefaultTableModel) countryTable.getModel();
            model.setRowCount(0);
            while(countryResults.next()){
                boolean f = false;
                String country = countryResults.getString(1);
                Object[] row = {false, country};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        castCombo1.removeAllItems();
        castCombo2.removeAllItems();
        castCombo3.removeAllItems();
        castCombo4.removeAllItems();
        castComboText1.setText(""); //stops autopopulation of text field
        castComboText2.setText("");
        castComboText3.setText("");
        castComboText4.setText("");
        directorCombo.removeAllItems();
        directorComboText.setText("");
    }
    
    //fills the queryOutput textArea with the appropriate movie query given selection fields
    private void movieResultsQuery(){
        int rightParentheses = 0;
        ArrayList <String> genreList = new ArrayList <>();
        for(int i = 0; i < genreTable.getRowCount(); i++){
            if(genreTable.getValueAt(i, 0) != null && (Boolean) genreTable.getValueAt(i, 0)){
                genreList.add(genreTable.getValueAt(i, 1).toString());
            }
        }
        ArrayList <String> countryList = new ArrayList <>();
        for(int i = 0; i < countryTable.getRowCount(); i++){
            if(countryTable.getValueAt(i, 0) != null && (Boolean) countryTable.getValueAt(i, 0)){
                countryList.add(countryTable.getValueAt(i, 1).toString());
            }
        }
        ArrayList <String> actorList = new ArrayList <>();
        if(!castComboText1.getText().trim().isEmpty()){
            actorList.add(castComboText1.getText());
        }
        if(!castComboText2.getText().trim().isEmpty()){
            actorList.add(castComboText2.getText());
        }
        if(!castComboText3.getText().trim().isEmpty()){
            actorList.add(castComboText3.getText());
        }
        if(!castComboText4.getText().trim().isEmpty()){
            actorList.add(castComboText4.getText());
        }
        ArrayList <String> tagList = new ArrayList <>();
        for(int i = 0; i < tagTable.getRowCount(); i++){
            if(tagTable.getValueAt(i, 0) != null && (Boolean) tagTable.getValueAt(i, 0)){
                tagList.add(tagTable.getValueAt(i, 1).toString());
            }
        }
        StringBuilder movieQuery = new StringBuilder();
        movieQuery.append("SELECT mo.movieID, mo.title, mo.year, mo.rtAudRating, mo.rtAudNumRatings\n");
        movieQuery.append("FROM movies mo\n");
        movieQuery.append("WHERE mo.movieID IN(\n");
        //Subquery with tags
        if(tagList.size() > 0){
            rightParentheses++;
            movieQuery.append("SELECT mt1.movieID\n");
            movieQuery.append("FROM movieTags mt1");
            for(int i = 1; i < tagList.size(); i++){
                movieQuery.append(", movieTags mt").append(i+1);
            }
            movieQuery.append("\nWHERE (mt1.tagID = ").append(tagList.get(0));
            for(int i = 1; i < tagList.size(); i++){
                movieQuery.append(" ").append(andOr()).append(" mt").append(i+1).append(".tagID = ").append(tagList.get(i));
            }
            movieQuery.append(") AND ");
            for(int i = 1; i < tagList.size(); i++){
                movieQuery.append("mt").append(i).append(".movieID = mt").append(i+1).append(".movieID").append(" AND ");
            }
            movieQuery.append("mt1.movieID IN(\n");
        }
        //Subquery with actors
        if(actorList.size() > 0){
            rightParentheses++;
            movieQuery.append("SELECT a1.movieID\n");
            movieQuery.append("FROM movieActors a1");
            for(int i = 1; i < actorList.size(); i++){
                movieQuery.append(", movieActors a").append(i+1);
            }
            movieQuery.append("\nWHERE (a1.actorName = '").append(actorList.get(0)).append("'");
            for(int i = 1; i < actorList.size(); i++){
                movieQuery.append(" ").append(andOr()).append(" a").append(i+1).append(".actorName = '").append(actorList.get(i)).append("'");
            }
            movieQuery.append(") AND ");
            for(int i = 1; i < actorList.size(); i++){
                movieQuery.append("a").append(i).append(".movieID = a").append(i+1).append(".movieID").append(" AND ");
            }
            movieQuery.append("a1.movieID IN(\n");
        }
        //Subquery for directors
        if(!directorComboText.getText().trim().isEmpty()){
            rightParentheses++;
            movieQuery.append("SELECT d.movieID\n");
            movieQuery.append("FROM movieDirectors d\n");
            movieQuery.append("WHERE d.directorName = '").append(directorComboText.getText()).append("' AND d.movieID IN(\n");
        }
        //subquery for countries
        if(countryList.size() > 0){
            rightParentheses++;
            movieQuery.append("SELECT c.movieID\n");
            movieQuery.append("FROM movieCountries c\n");
            movieQuery.append("WHERE (c.country = '").append(countryList.get(0)).append("'");
            for(int i = 1; i < countryList.size(); i++){
                movieQuery.append(" OR c.country = '").append(countryList.get(i)).append("'");
            }
            movieQuery.append(") AND c.movieID IN(\n");
        }
        //add year filter
        movieQuery.append("SELECT m.movieID\n");
        movieQuery.append("FROM MOVIES m\n");
        movieQuery.append("WHERE m.year >= ").append(movieFromYear.getText()).append(" AND m.year <= ").append(movieToYear.getText()).append(" AND m.movieID IN(\n");
        //add genre filter
        if(genreList.isEmpty()){
            return;
        }
        movieQuery.append("SELECT g1.movieID\n");
        movieQuery.append("FROM movieGenres g1");
        for(int i = 1; i < genreList.size(); i++){
            movieQuery.append(", movieGenres g").append(i+1);
        }
        movieQuery.append("\nWHERE (g1.genre = '").append(genreList.get(0)).append("'");
        if(genreList.size() > 1){
            for(int i = 1; i < genreList.size(); i++){
                movieQuery.append(" ").append(andOr()).append(" g").append(i+1).append(".genre = '").append(genreList.get(i)).append("'");
            }
            movieQuery.append(")");
            for(int i = 1; i < genreList.size(); i++){
                movieQuery.append(" AND g").append(i).append(".movieID = g").append(i+1).append(".movieID");
            }
        }
        else{
            movieQuery.append(")");
        }
        movieQuery.append("))");
        for(int i = 0; i < rightParentheses; i++){
            movieQuery.append(")");
        }
        queryOutput.setText(movieQuery.toString());
        ResultSet movieResults = queryDatabase.main(movieQuery.toString());
        try {
            DefaultTableModel model = (DefaultTableModel) movieResultsTable.getModel();
            model.setRowCount(0);
            while(movieResults.next()){
                int movieID = movieResults.getInt(1);
                String title = movieResults.getString(2);
                int year = movieResults.getInt(3);
                float rating = movieResults.getFloat(4);
                int number = movieResults.getInt(5);
                Object[] row = {false, movieID, title, year, rating, number};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Determines which radio button is selected for ANDing/ORing the columns and returns the appropriate string for SQL
    private String andOr(){
        if(radioOr.isSelected()){
            return "OR";
        }
        else{
            return "AND";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //List<String> genres = new ArrayList<String>();
            
            
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> castCombo1;
    private javax.swing.JComboBox<String> castCombo2;
    private javax.swing.JComboBox<String> castCombo3;
    private javax.swing.JComboBox<String> castCombo4;
    private javax.swing.JTextField castComboText1;
    private javax.swing.JTextField castComboText2;
    private javax.swing.JTextField castComboText3;
    private javax.swing.JTextField castComboText4;
    private javax.swing.JTable countryTable;
    private javax.swing.JComboBox<String> directorCombo;
    private javax.swing.JTextField directorComboText;
    private javax.swing.JButton executeMovieQueryButton;
    private javax.swing.JButton executeUserQueryButton;
    private javax.swing.JTable genreTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField movieFromYear;
    private javax.swing.JTable movieResultsTable;
    private javax.swing.JTextField movieToYear;
    private javax.swing.JTextArea queryOutput;
    private javax.swing.JRadioButton radioAnd;
    private javax.swing.JRadioButton radioOr;
    private javax.swing.ButtonGroup searchBetweenAttributeValuesButtonGroup;
    private javax.swing.JComboBox<String> tagFilterOperator;
    private javax.swing.JTextField tagFilterValue;
    private javax.swing.JTable tagTable;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
